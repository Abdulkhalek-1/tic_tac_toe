class TicTacToeGame:
    def __init__(self):
        self.board = {
            "11": "", "12": "", "13": "",
            "21": "", "22": "", "23": "",
            "31": "", "32": "", "33": ""
        }
        self.current_player = "X"
    
    def display_board(self):
        for row in range(1, 4):
            print(" | ".join(self.board[f"{row}{col}"] for col in range(1, 4)))
            if row < 3:
                print("-" * 9)
    
    def bot_move(self):
        empty_positions = [pos for pos, value in self.board.items() if value == ""]
        if not empty_positions:
            return False  # No more empty positions, the game is over
        
        # Replace this with your bot's strategy
        bot_position = empty_positions[0]  # Choose the first available empty position
        self.board[bot_position] = self.current_player
        return True
    
    def play(self):
        while True:
            self.display_board()
            
            if self.current_player == "X":
                player_position = input("Enter your move (row column, e.g., 21): ")
                if self.board.get(player_position) == "" and len(player_position) == 2:
                    self.board[player_position] = self.current_player
                else:
                    print("Invalid move. Try again.")
                    continue
            else:
                bot_moved = self.bot_move()
                if not bot_moved:
                    break  # No more empty positions, the game is over
            
            result = self.game_result(self.board)
            if result != "still playing":
                self.display_board()
                if result == "draw":
                    print("It's a draw!")
                else:
                    print(f"{result} wins!")
                break
            
            self.current_player = "O" if self.current_player == "X" else "X"

    # Define the game_result function here

# Instantiate the game and start playing
game = TicTacToeGame()
game.play()
